#!/usr/bin/env ruby

# pastebin is a command line interface to pastebin.com
# It can read from a file or from STDIN
#
# Copyright (C) 2010 Doug Prostko 
#

require "bundler/setup"
require "pastebin"
require 'optparse'

# set up all the options stuff
options = {}
opts = OptionParser.new do |opts|
	opts.banner =  "pastebin is a CLI to http://pastebin.com
	Usage: pastebin [options] 
	Examples: pastebin -f foo.rb -t ruby -e '10 Minutes'
	          cat foo.pl | pastebin -f - -l perl"

	opts.separator ""
	opts.separator "Options:"

	opts.on("-f <file>", "--file <file>", String,
	  	"Use a file for input, use \"-\" for STDIN") do |f|
	        	options["api_paste_code"] = f
	end

	opts.on("-n", "--name <name>", String,
		"Assign a name/title to your paste") do |n|
			options["api_paste_name"] = n
		end

	opts.on("-s", "--subdomain <subdomain>", String,
		"Paste to a specific subdomain") do |s|
			options["api_paste_subdomain"] = s
	end

    opts.on("-r", "--raw <link>", String, 
        "Return raw text from a paste link") do |r|
            options["raw"] = r
    end

	expire_array = [ 
             "N",
			 "10M",
			 "1H",
			 "1D",
			 "1M",
	]
	expire_list = expire_array.join(", ")
	opts.on("-e", "--expire <time>", expire_array, "These can be abbriviated, as long as they are unambigous. Defaults to '1 Month'", "#{expire_list}" ) do |e|
			options["api_paste_expire_date"] = e
	end

    syntax_array = [ 'perl',
        'python',
        'c',
        'ruby',
        'bash',
        'cpp',
        'groovy',
        'latex',
        'java',
        'php',
        'sql',
        'xml'
    ]

	code_list = syntax_array.join(", ")
	opts.on("-l", "--language <syntax>", syntax_array, "Syntax types can be abbriviated, as long as they are unambigous. There are many more supported languages than what is listed here. Defaults to 'text'", "  #{code_list}") do |encoding|
			options["api_paste_format"] = encoding 
	end

    opts.on("-p", "--private", "Make paste private.") do
        options["api_paste_private"] = "1"
    end

	opts.on_tail("-h", "--help", "Show this message") do
	   puts opts
       exit
	end
end

# parse options
opts.parse(ARGV)

pbin = Pastebin.new(options)
puts 'options = ' + options.inspect
if options["raw"]
    puts pbin.get_raw(options["raw"])
else
    puts pbin.paste
end

